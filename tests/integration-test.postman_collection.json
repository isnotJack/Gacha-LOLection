{
	"info": {
		"_postman_id": "97fa0d6b-6340-42bb-9e35-b0cece03357a",
		"name": "integration-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39572565",
		"_collection_link": "https://sse888.postman.co/workspace/SSE-Workspace~ba3287da-3f46-4d53-b9ae-99dcb913c461/collection/39569604-97fa0d6b-6340-42bb-9e35-b0cece03357a?action=share&source=collection_link&creator=39572565"
	},
	"item": [
		{
			"name": "workflow",
			"item": [
				{
					"name": "Admin reg log add_gacha",
					"item": [
						{
							"name": "sign_up",
							"item": [
								{
									"name": "signup_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "email",
													"value": "system@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "signup_not_password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "",
													"type": "text"
												},
												{
													"key": "email",
													"value": "system@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "signup_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(422));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "email",
													"value": "system@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "login_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password",
													"pm.test(\"Verify login using the provided username and password in JSON format\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('access_token');",
													"    pm.expect(pm.response.to.have.status(200));",
													"});",
													"",
													"pm.test(\"Access Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"admin_auth_token\", jsonData.access_token);",
													"});",
													"",
													"",
													"pm.test(\"Refresh Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_not_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "Andrea",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "add_gacha",
							"item": [
								{
									"name": "add_gacha_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response message",
													"pm.test(\"Response message is 'Gacha added successfully'\", function () {",
													"    pm.expect(pm.response.json().message).to.equal('Gacha added successfully');",
													"});",
													"",
													"// Test to verify the gacha details include the required properties",
													"pm.test(\"Gacha details include name, image path, rarity, and description\", function () {",
													"    var gachaDetails = pm.response.json().gacha;",
													"    pm.expect(gachaDetails).to.have.property('name');",
													"    pm.expect(gachaDetails).to.have.property('image_path');",
													"    pm.expect(gachaDetails).to.have.property('rarity');",
													"    pm.expect(gachaDetails).to.have.property('description');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "common",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "postman-cloud:///1efa8252-c07c-4de0-9114-3368d46f4848"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_gacha_ok_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response message",
													"pm.test(\"Response message is 'Gacha added successfully'\", function () {",
													"    pm.expect(pm.response.json().message).to.equal('Gacha added successfully');",
													"});",
													"",
													"// Test to verify the gacha details include the required properties",
													"pm.test(\"Gacha details include name, image path, rarity, and description\", function () {",
													"    var gachaDetails = pm.response.json().gacha;",
													"    pm.expect(gachaDetails).to.have.property('name');",
													"    pm.expect(gachaDetails).to.have.property('image_path');",
													"    pm.expect(gachaDetails).to.have.property('rarity');",
													"    pm.expect(gachaDetails).to.have.property('description');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial2 gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "rare",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "postman-cloud:///1efa8252-c07c-4de0-9114-3368d46f4848"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_gacha_ok_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response message",
													"pm.test(\"Response message is 'Gacha added successfully'\", function () {",
													"    pm.expect(pm.response.json().message).to.equal('Gacha added successfully');",
													"});",
													"",
													"// Test to verify the gacha details include the required properties",
													"pm.test(\"Gacha details include name, image path, rarity, and description\", function () {",
													"    var gachaDetails = pm.response.json().gacha;",
													"    pm.expect(gachaDetails).to.have.property('name');",
													"    pm.expect(gachaDetails).to.have.property('image_path');",
													"    pm.expect(gachaDetails).to.have.property('rarity');",
													"    pm.expect(gachaDetails).to.have.property('description');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial3 gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "legendary",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "postman-cloud:///1efa8252-c07c-4de0-9114-3368d46f4848"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_gacha_AlreadyExists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response is 400 when a gacha is already present\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('Error');",
													"    pm.expect(pm.response.to.have.status(400));",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "common",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "postman-cloud:///1efa8252-c07c-4de0-9114-3368d46f4848"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_gacha_MissingParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response is 400 when a parameter is missing\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('Error');",
													"    pm.expect(pm.response.to.have.status(400));",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial2 gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "common",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_gacha_VoidImage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error code 400 with message 'No selected file' is returned when image has not been selected\", function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('Error');",
													"    pm.expect(pm.response.to.have.status(400));",
													"});",
													"  "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial2 gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "common",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_gacha_InvalidImageType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error code 400 for file type not allowed\", function () {",
													"    pm.response.to.have.status(400);",
													"    ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial2 gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "common",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This is a trial gacha",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "postman-cloud:///1efa82bd-d1e5-4f30-abda-93bf7ad8bc5f"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/add_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"add_gacha"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_auth_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "User reg log buy roll",
					"item": [
						{
							"name": "sign_up",
							"item": [
								{
									"name": "signup_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "email",
													"value": "user1@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "signup_ok_user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user2",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "email",
													"value": "user2@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "signup_not_password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "",
													"type": "text"
												},
												{
													"key": "email",
													"value": "user1@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "signup_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify singup\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(422));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "email",
													"value": "user1@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/signup",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"signup"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "login_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password",
													"pm.test(\"Verify login using the provided username and password in JSON format\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('access_token');",
													"    pm.expect(pm.response.to.have.status(200));",
													"});",
													"",
													"pm.test(\"Access Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"user1_auth_token\", jsonData.access_token);",
													"});",
													"",
													"",
													"pm.test(\"Refresh Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"user1_refresh_token\", jsonData.refresh_token);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_ok_user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password",
													"pm.test(\"Verify login using the provided username and password in JSON format\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('access_token');",
													"    pm.expect(pm.response.to.have.status(200));",
													"});",
													"",
													"pm.test(\"Access Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"user2_auth_token\", jsonData.access_token);",
													"});",
													"",
													"",
													"pm.test(\"Refresh Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"user2_refresh_token\", jsonData.refresh_token);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user2",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_not_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "Andrea",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "buycurrency",
							"item": [
								{
									"name": "buycur_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify buycurrency\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user1_auth_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "100",
													"type": "text"
												},
												{
													"key": "payment_method",
													"value": "card",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/payment_service/buycurrency",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"payment_service",
												"buycurrency"
											]
										}
									},
									"response": []
								},
								{
									"name": "buycur_ok_user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify buycurrency\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user2_auth_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user2",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "100",
													"type": "text"
												},
												{
													"key": "payment_method",
													"value": "card",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/payment_service/buycurrency",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"payment_service",
												"buycurrency"
											]
										}
									},
									"response": []
								},
								{
									"name": "buycur_not_amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify buycurrency\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user1_auth_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "",
													"type": "text"
												},
												{
													"key": "method",
													"value": "card",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/payment_service/buycurrency",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"payment_service",
												"buycurrency"
											]
										}
									},
									"response": []
								},
								{
									"name": "buycur_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify buycurrency\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(403));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user1_auth_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "us444",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "100",
													"type": "text"
												},
												{
													"key": "method",
													"value": "card",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/payment_service/buycurrency",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"payment_service",
												"buycurrency"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "gacha_roll",
							"item": [
								{
									"name": "gacharoll_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"let response = pm.response.json()",
													"pm.environment.set(\"rolledGacha\", response.gacha_name)",
													"",
													"pm.test(\"Gacha details include name, description, rarity, image, and collected date\", function () {",
													"    var gachaDetails = pm.response.json();",
													"    pm.expect(gachaDetails).to.have.property('gacha_name');",
													"    pm.expect(gachaDetails).to.have.property('description');",
													"    pm.expect(gachaDetails).to.have.property('rarity');",
													"    pm.expect(gachaDetails).to.have.property('img');",
													"    pm.expect(gachaDetails).to.have.property('collected_date');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"user1\",\n    \"level\": \"standard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/gacha_roll/gacharoll",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gacha_roll",
												"gacharoll"
											]
										}
									},
									"response": []
								},
								{
									"name": "gacharoll_MissingParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code 403 for not passing token validation\", function () {",
													"    let responseData = pm.response.json();",
													"  pm.response.to.have.status(403);",
													"  pm.expect(responseData).to.have.property('Error');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"level\": \"standard\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/gacha_roll/gacharoll",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gacha_roll",
												"gacharoll"
											]
										}
									},
									"response": []
								},
								{
									"name": "gacharoll_InvalidPacketLevel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code 400 for invalid packet level\", function () {",
													"    let responseData = pm.response.json();",
													"  pm.response.to.have.status(400);",
													"  pm.expect(responseData).to.have.property('Error');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"user1\",\n    \"level\": \"aaa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/gacha_roll/gacharoll",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gacha_roll",
												"gacharoll"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user1_auth_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "User create auction",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Auction created successfully\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Auction created successfully\");",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id).to.be.a('number');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"seller_username\": \"user1\",\n    \"gacha_name\": \"{{rolledGacha}}\",\n    \"basePrice\": 10.0,\n    \"endDate\": \"2024-12-31T23:59:59\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/auction_service/create",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "twin_auction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for existing active auction\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"Error\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"seller_username\": \"user1\",\n    \"gacha_name\": \"Trial gacha\",\n    \"basePrice\": 10.0,\n    \"endDate\": \"2024-12-31T23:59:59\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/auction_service/create",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "missing_param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing parameters\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"error\", \"Missing required parameters\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"seller_username\": \"player2\",\n    \"gacha_name\": \"doge\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/auction_service/create",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "price_not_valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid base price\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"Error\");",
													"    });",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"seller_username\": \"player1\",\n    \"gacha_name\": \"GachaX\",\n    \"basePrice\": -50.0,\n    \"endDate\": \"2024-12-31T23:59:59\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/auction_service/create",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "old_date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid end date\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"Error\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"seller_username\": \"player1\",\n    \"gacha_name\": \"GachaX\",\n    \"basePrice\": 100.0,\n    \"endDate\": \"2023-01-01T23:59:59\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5001/auction_service/create",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"create"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user1_auth_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin see modify",
					"item": [
						{
							"name": "see",
							"item": [
								{
									"name": "all_auction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify that the API returns the auctions",
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response is not an empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5009/auction_service/see",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auction_service",
												"see"
											]
										}
									},
									"response": []
								},
								{
									"name": "status_closed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All auctions have status closed\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(auction => {",
													"        pm.expect(auction.status).to.eql(\"closed\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5009/auction_service/see?status=closed",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "status",
													"value": "closed"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "status_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All auctions have status active\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(auction => {",
													"        pm.expect(auction.status).to.eql(\"active\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5009/auction_service/see?status=active",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "status",
													"value": "active"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "found_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5009/auction_service/see?auction_id=1",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "auction_id",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "not_found_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message is Auction not found\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('Error');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5009/auction_service/see?auction_id=999999",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "auction_id",
													"value": "999999"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "modify",
							"item": [
								{
									"name": "modify_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify that the API returns the auctions",
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is a message\", function () {",
													"    const jsonData = pm.response.json();",
													"     pm.expect(jsonData).to.have.property('message');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"auction_id\" : \"1\",\r\n       \"seller_username\": \"user1\",\r\n        \"gacha_name\": \"meme2.png\",\r\n        \"base_price\" : \"10\",\r\n        \"end_date\": \"01/12/2024\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://localhost:5009/auction_service/modify",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auction_service",
												"modify"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_auth_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User see,bid",
					"item": [
						{
							"name": "see",
							"item": [
								{
									"name": "all_auction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify that the API returns the auctions",
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response is not an empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/see",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"see"
											]
										}
									},
									"response": []
								},
								{
									"name": "status_closed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All auctions have status closed\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(auction => {",
													"        pm.expect(auction.status).to.eql(\"closed\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/see?status=closed",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "status",
													"value": "closed"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "status_active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All auctions have status active\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(auction => {",
													"        pm.expect(auction.status).to.eql(\"active\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/see?status=active",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "status",
													"value": "active"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "found_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/see?auction_id=1",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "auction_id",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "not_found_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message is Auction not found\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('Error');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/see?auction_id=999999",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"see"
											],
											"query": [
												{
													"key": "auction_id",
													"value": "999999"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user1_auth_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "bid",
							"item": [
								{
									"name": "bid_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bid is successfully placed\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\", \"New bid set\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/bid?username=user2&auction_id=1&newBid=50.0",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"bid"
											],
											"query": [
												{
													"key": "username",
													"value": "user2"
												},
												{
													"key": "auction_id",
													"value": "1"
												},
												{
													"key": "newBid",
													"value": "50.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "missing_param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing parameters\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"error\", \"Missing required parameters\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/bid?username=user2&auction_id=1",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"bid"
											],
											"query": [
												{
													"key": "username",
													"value": "user2"
												},
												{
													"key": "auction_id",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "auction_not_found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message for auction not found\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"Error\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/bid?username=jane_doe&auction_id=9999&newBid=150.0",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"bid"
											],
											"query": [
												{
													"key": "username",
													"value": "jane_doe"
												},
												{
													"key": "auction_id",
													"value": "9999"
												},
												{
													"key": "newBid",
													"value": "150.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "low_bid_currentprice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid bid amount\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"Error\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/bid?username=user2&auction_id=1&newBid=10.0",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"bid"
											],
											"query": [
												{
													"key": "username",
													"value": "user2"
												},
												{
													"key": "auction_id",
													"value": "1"
												},
												{
													"key": "newBid",
													"value": "10.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "low_bid_baseprice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for bid below base price\", function () {",
													"    const jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.have.property(\"Error\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/bid?username=jane_doe&auction_id=1&newBid=10.0",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"bid"
											],
											"query": [
												{
													"key": "username",
													"value": "jane_doe"
												},
												{
													"key": "auction_id",
													"value": "1"
												},
												{
													"key": "newBid",
													"value": "10.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "nobid_for_actual_winner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for duplicate highest bidder\", function () {",
													"    const jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.have.property(\"Error\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://localhost:5001/auction_service/bid?username=user2&auction_id=1&newBid=60",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auction_service",
												"bid"
											],
											"query": [
												{
													"key": "username",
													"value": "user2"
												},
												{
													"key": "auction_id",
													"value": "1"
												},
												{
													"key": "newBid",
													"value": "60"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user2_auth_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Admin new token",
					"item": [
						{
							"name": "newToken_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify logout using token\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('access_token');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});\r",
											"\r",
											"pm.test(\"Access Token received\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"admin_auth_token\", jsonData.access_token);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMjE4MTU4MiwianRpIjoiYzNmZDBlOGUtNjRmNy00ZDU5LWIzNzUtYmQ1ZGViZmMzMTZhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6eyJ1c2VybmFtZSI6InVzZXIxIiwicm9sZSI6InVzZXIifSwibmJmIjoxNzMyMTgxNTgyLCJleHAiOjE3MzIxODI0ODJ9.XZeBpcQOA-rzdIU0LrQNgWhV4s9AEwdazqr2rS6i6lQ\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5009/auth_service/newToken",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5009",
									"path": [
										"auth_service",
										"newToken"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_refresh_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User new token",
					"item": [
						{
							"name": "newToken_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify logout using token\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('access_token');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});\r",
											"\r",
											"pm.test(\"Access Token received\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"user1_auth_token\", jsonData.access_token);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMjE4MTU4MiwianRpIjoiYzNmZDBlOGUtNjRmNy00ZDU5LWIzNzUtYmQ1ZGViZmMzMTZhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6eyJ1c2VybmFtZSI6InVzZXIxIiwicm9sZSI6InVzZXIifSwibmJmIjoxNzMyMTgxNTgyLCJleHAiOjE3MzIxODI0ODJ9.XZeBpcQOA-rzdIU0LrQNgWhV4s9AEwdazqr2rS6i6lQ\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5001/auth_service/newToken",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"auth_service",
										"newToken"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user1_refresh_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin update gacha, delete, see collection",
					"item": [
						{
							"name": "update_gacha",
							"item": [
								{
									"name": "update_gacha_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test to verify the response message",
													"pm.test(\"Response message is 'Gacha updated successfully'\", function () {",
													"    pm.expect(pm.response.json().message).to.equal('Gacha updated successfully');",
													"});",
													"",
													"// Test to verify the gacha details include the required properties",
													"pm.test(\"Gacha details include name, rarity, and description\", function () {",
													"    var gachaDetails = pm.response.json().gacha;",
													"    pm.expect(gachaDetails).to.have.property('name');",
													"    pm.expect(gachaDetails).to.have.property('rarity');",
													"    pm.expect(gachaDetails).to.have.property('description');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "legendary",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This gacha is now legendary",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/update_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"update_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "update_gacha_MissingGachaName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error code 400 for missing gacha_name in request\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.json()).to.have.property('Error');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "rarity",
													"value": "rare",
													"type": "text"
												},
												{
													"key": "description",
													"value": "This gacha is rare",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/update_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"update_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "update_gacha_GachaNameNotExists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error code 404 for gacha_name not existing\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.expect(pm.response.json()).to.have.property('Error');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "aaaa",
													"type": "text"
												},
												{
													"key": "rarity",
													"value": "rare",
													"type": "text"
												},
												{
													"key": "description",
													"value": "ciao",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/update_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"update_gacha"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_gacha",
							"item": [
								{
									"name": "delete_gacha_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for response status code and specific message in the response",
													"pm.test(\"Gacha successfully deleted\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().message).to.not.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial3 gacha",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/delete_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"delete_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_gacha_MissingGachaName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Error code 400 for missing gacha_name in request\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('Error');",
													"    pm.expect(pm.response.to.have.status(400));",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/delete_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"delete_gacha"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_gacha_GachaNameNotExists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Error code 404 for gacha_name not existing\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('Error');",
													"    pm.expect(pm.response.to.have.status(404));",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "aaaaaaa",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/delete_gacha",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"delete_gacha"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get_gacha_collection",
							"item": [
								{
									"name": "getOneGacha",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Modified test to verify that the length of the gacha details list is equal to 1",
													"pm.test(\"Gacha details include one gacha item\", function () {",
													"    pm.expect(pm.response.json().length).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "getListOfGachas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// verify that the gacha details include a list with 2 items",
													"pm.test(\"Gacha details include a list of 2 gachas\", function () {",
													"       pm.expect(pm.response.json().length).to.equal(2);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												},
												{
													"key": "gacha_name",
													"value": "Trial2 gacha",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAllGachas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// verify that the gacha details include a list with 2 items",
													"pm.test(\"Gacha details include a list of gachas\", function () {",
													"       pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "GachaNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 404 for gacha not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "aaaaa",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_auth_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User try profile setting",
					"item": [
						{
							"name": "profile_setting",
							"item": [
								{
									"name": "modify_profile",
									"item": [
										{
											"name": "modify_profile_ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Profile updated successfully\", function () {",
															"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Profile updated successfully\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "username",
															"value": "user1",
															"type": "text"
														},
														{
															"key": "image",
															"type": "file",
															"src": "postman-cloud:///1efa8e6b-e099-4c20-bcf3-e6c6bb8866d7"
														}
													]
												},
												"url": {
													"raw": "https://localhost:5001/profile_setting/modify_profile",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"modify_profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "TryToModifycurrency_balance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Error message for currency_balance not modifiable\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"Error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "username",
															"value": "user1",
															"type": "text"
														},
														{
															"key": "field",
															"value": "currency_balance",
															"type": "text"
														},
														{
															"key": "value",
															"value": "4000000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:5001/profile_setting/modify_profile",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"modify_profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "NoUsernameParam",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Missing username parameter\", function () {",
															"    pm.expect(pm.response.json()).to.have.property(\"Error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "field",
															"value": "currency_balance",
															"type": "text"
														},
														{
															"key": "value",
															"value": "4000000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:5001/profile_setting/modify_profile",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"modify_profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "UsernameDifferentThanToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message for username in token doesn't match username in request\", function () {",
															"    const jsonData = pm.response.json();",
															"       pm.expect(pm.response.json()).to.have.property(\"Error\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "username",
															"value": "aaaa",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:5001/profile_setting/modify_profile",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"modify_profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "NothingToModify",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Error message for no field to modify\", function () {",
															"    const jsonData = pm.response.json();",
															"       pm.expect(pm.response.json()).to.have.property(\"Error\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "username",
															"value": "user1",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:5001/profile_setting/modify_profile",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"modify_profile"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "check_profile",
									"item": [
										{
											"name": "profile_ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Profile data retrieved successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"username\");",
															"    pm.expect(jsonData).to.have.property(\"email\");",
															"    pm.expect(jsonData).to.have.property(\"profile_image\").that.includes(\"/images_profile/uploads/\");",
															"    pm.expect(jsonData).to.have.property(\"currency_balance\").that.is.a('number');",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/checkprofile?username=user1",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"checkprofile"
													],
													"query": [
														{
															"key": "username",
															"value": "user1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "UsernameDifferentThanToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message for username in token doesn't match username in request\", function () {",
															"    const jsonData = pm.response.json();",
															"       pm.expect(pm.response.json()).to.have.property(\"Error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/checkprofile?username=user4444",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"checkprofile"
													],
													"query": [
														{
															"key": "username",
															"value": "user4444"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "missing_param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message for missing username\", function () {",
															"    const jsonData = pm.response.json();",
															"      pm.expect(jsonData).to.have.property(\"Error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/checkprofile",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"checkprofile"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "retrieve_gachacollection",
									"item": [
										{
											"name": "retrieve_ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Response data is an array or message property is present\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.satisfy((data) => {",
															"        return Array.isArray(data) || data.hasOwnProperty('message');",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/retrieve_gachacollection?username=user1",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"retrieve_gachacollection"
													],
													"query": [
														{
															"key": "username",
															"value": "user1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "UsernameDifferentThanToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message for username in token doesn't match username in request\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"Error\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/retrieve_gachacollection?username=user444",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"retrieve_gachacollection"
													],
													"query": [
														{
															"key": "username",
															"value": "user444"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "no_collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test to be done logging in with a user without gachas",
															"",
															"pm.test(\"Response status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"The user has no gachas in his collection\", function () {",
															"    pm.expect(pm.response.json().message).to.include(\"User has no gachas\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/retrieve_gachacollection?username=user1",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"retrieve_gachacollection"
													],
													"query": [
														{
															"key": "username",
															"value": "user1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "info_gachacollection",
									"item": [
										{
											"name": "info_gachacollection_ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Result include one gacha item\", function () {",
															"    pm.expect(pm.response.json().length).to.equal(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/info_gachacollection?username=user1&gacha_name=Trial%20gacha",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"info_gachacollection"
													],
													"query": [
														{
															"key": "username",
															"value": "user1"
														},
														{
															"key": "gacha_name",
															"value": "Trial%20gacha"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "NotExistingGacha",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://localhost:5001/profile_setting/info_gachacollection?username=user1&gacha_name=Trial",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "5001",
													"path": [
														"profile_setting",
														"info_gachacollection"
													],
													"query": [
														{
															"key": "username",
															"value": "user1"
														},
														{
															"key": "gacha_name",
															"value": "Trial"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user1_auth_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User get_gacha collection",
					"item": [
						{
							"name": "get_gacha_collection",
							"item": [
								{
									"name": "getOneGacha",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Modified test to verify that the length of the gacha details list is equal to 1",
													"pm.test(\"Gacha details include one gacha item\", function () {",
													"    pm.expect(pm.response.json().length).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "getListOfGachas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// verify that the gacha details include a list with 2 items",
													"pm.test(\"Gacha details include a list of 2 gachas\", function () {",
													"       pm.expect(pm.response.json().length).to.equal(2);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "Trial gacha",
													"type": "text"
												},
												{
													"key": "gacha_name",
													"value": "Trial2 gacha",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAllGachas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// verify that the gacha details include a list with 2 items",
													"pm.test(\"Gacha details include a list of gachas\", function () {",
													"       pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://localhost:5001/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "GachaNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the response code",
													"pm.test(\"Response code is 404 for gacha not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gacha_name",
													"value": "aaaaa",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/gachasystem_service/get_gacha_collection",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"gachasystem_service",
												"get_gacha_collection"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user1_auth_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin logout, login, delete",
					"item": [
						{
							"name": "logout",
							"item": [
								{
									"name": "logout_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify logout using token\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_refresh_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMjE4MTU4MiwianRpIjoiYzNmZDBlOGUtNjRmNy00ZDU5LWIzNzUtYmQ1ZGViZmMzMTZhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6eyJ1c2VybmFtZSI6InVzZXIxIiwicm9sZSI6InVzZXIifSwibmJmIjoxNzMyMTgxNTgyLCJleHAiOjE3MzIxODI0ODJ9.XZeBpcQOA-rzdIU0LrQNgWhV4s9AEwdazqr2rS6i6lQ\"",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://localhost:5009/auth_service/logout",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "logout_bad_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify logout using token\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer ",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://localhost:5009/auth_service/logout",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_refresh_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "login_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password",
													"pm.test(\"Verify login using the provided username and password in JSON format\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('access_token');",
													"    pm.expect(pm.response.to.have.status(200));",
													"});",
													"",
													"pm.test(\"Access Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"admin_auth_token\", jsonData.access_token);",
													"});",
													"",
													"",
													"pm.test(\"Refresh Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_not_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "Andrea",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_not_password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(403));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "player2222",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_bad_password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "system",
													"type": "text"
												},
												{
													"key": "password",
													"value": "5677",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5009/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5009",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_auth_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "User logout, login, delete",
					"item": [
						{
							"name": "logout",
							"item": [
								{
									"name": "logout_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify logout using token\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user1_refresh_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMjE4MTU4MiwianRpIjoiYzNmZDBlOGUtNjRmNy00ZDU5LWIzNzUtYmQ1ZGViZmMzMTZhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6eyJ1c2VybmFtZSI6InVzZXIxIiwicm9sZSI6InVzZXIifSwibmJmIjoxNzMyMTgxNTgyLCJleHAiOjE3MzIxODI0ODJ9.XZeBpcQOA-rzdIU0LrQNgWhV4s9AEwdazqr2rS6i6lQ\"",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://localhost:5001/auth_service/logout",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "logout_bad_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify logout using token\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer ",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://localhost:5001/auth_service/logout",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user1_refresh_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "login_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password",
													"pm.test(\"Verify login using the provided username and password in JSON format\", ",
													"function () {",
													"    var responseData = pm.response.json();",
													"",
													"    // Add assertions to validate the response body",
													"    pm.expect(responseData).to.have.property('access_token');",
													"    pm.expect(pm.response.to.have.status(200));",
													"});",
													"",
													"pm.test(\"Access Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"user1_auth_token\", jsonData.access_token);",
													"});",
													"",
													"",
													"pm.test(\"Refresh Token received\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"user1_refresh_token\", jsonData.refresh_token);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_not_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "Andrea",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/login",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user1_refresh_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete_ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('msg');\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_not_password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_bad_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(403));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "player2222",
													"type": "text"
												},
												{
													"key": "password",
													"value": "1234",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_bad_password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to verify the login using username and password\r",
													"pm.test(\"Verify delete\", \r",
													"function () {\r",
													"    var responseData = pm.response.json();\r",
													"    // Add assertions to validate the response body\r",
													"    pm.expect(responseData).to.have.property('Error');\r",
													"    pm.expect(pm.response.to.have.status(404));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "user1",
													"type": "text"
												},
												{
													"key": "password",
													"value": "5677",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://localhost:5001/auth_service/delete",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "5001",
											"path": [
												"auth_service",
												"delete"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user1_auth_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		}
	]
}