{
	"info": {
		"_postman_id": "413e7f61-71ea-4b20-a382-cc36e9d679d3",
		"name": "sse-project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39569604",
		"_collection_link": "https://sse888.postman.co/workspace/SSE-Workspace~ba3287da-3f46-4d53-b9ae-99dcb913c461/collection/39569604-413e7f61-71ea-4b20-a382-cc36e9d679d3?action=share&source=collection_link&creator=39569604"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "login_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password",
											"pm.test(\"Verify login using the provided username and password in JSON format\", ",
											"function () {",
											"    var responseData = pm.response.json();",
											"",
											"    // Add assertions to validate the response body",
											"    pm.expect(responseData).to.have.property('access_token');",
											"    pm.expect(pm.response.to.have.status(200));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login_not_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(422));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"player\",\r\n    \"password\": \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login_not_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify login using the provided username and password in JSON format\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"user1\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign_up",
					"item": [
						{
							"name": "signup_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify singup\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\",\r\n    \"password\" : \"1234\",\r\n    \"email\" : \"user1@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "signup_not _user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify singup\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"1234\",\r\n    \"email\" : \"user1@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "signup_not_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify singup\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\",\r\n    \"password\" : \"\",\r\n    \"email\" : \"user1@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "signup_not_email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify singup\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\",\r\n    \"password\" : \"1234\",\r\n    \"email\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "signup_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify singup\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(422));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\",\r\n    \"password\" : \"1234\",\r\n    \"email\" : \"user1@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"signup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "delete_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify delete\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"user1\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_not_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify delete\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_not_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify delete\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"user1\",\r\n    \"password\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify delete\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"player222\",\r\n    \"password\" : \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_bad_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify delete\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"user1\",\r\n    \"password\" : \"7890\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5002/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"delete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "logout_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify logout using token\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMjE4MTU4MiwianRpIjoiYzNmZDBlOGUtNjRmNy00ZDU5LWIzNzUtYmQ1ZGViZmMzMTZhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6eyJ1c2VybmFtZSI6InVzZXIxIiwicm9sZSI6InVzZXIifSwibmJmIjoxNzMyMTgxNTgyLCJleHAiOjE3MzIxODI0ODJ9.XZeBpcQOA-rzdIU0LrQNgWhV4s9AEwdazqr2rS6i6lQ\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5002/logout",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout_bad_token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify logout using token\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(422));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer ",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:5002/logout",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5002",
									"path": [
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "profile_setting",
			"item": [
				{
					"name": "modify_profile",
					"item": [
						{
							"name": "modify_profile_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Profile updated successfully\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Profile updated successfully\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efa8e6b-e099-4c20-bcf3-e6c6bb8866d7"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5003/modify_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"modify_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "TryToModifycurrency_balanca",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for currency_balance not modifiable\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Modifying 'currency_balance' field is not allowed\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "player1",
											"type": "text"
										},
										{
											"key": "field",
											"value": "currency_balance",
											"type": "text"
										},
										{
											"key": "value",
											"value": "4000000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5003/modify_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"modify_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "NoUsernameParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing username parameter\", function () {",
											"    pm.expect(pm.response.json().error).to.include(\"Missing required 'username' field\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "field",
											"value": "currency_balance",
											"type": "text"
										},
										{
											"key": "value",
											"value": "4000000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5003/modify_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"modify_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "ProfileNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for profile not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Profile not found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "aaaa",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5003/modify_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"modify_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidField(USELESS)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for invalid field to modify\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Field 'age' does not exist in profile\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "field",
											"value": "age",
											"type": "text"
										},
										{
											"key": "value",
											"value": "80",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5003/modify_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"modify_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "NothingToModify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for no field to modify\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"No valid field or image provided for update\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "user1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5003/modify_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"modify_profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "check_profile",
					"item": [
						{
							"name": "profile_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Profile data retrieved successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"username\", \"player1\");",
											"    pm.expect(jsonData).to.have.property(\"profile_image\").that.includes(\"/images_profile/uploads/\");",
											"    pm.expect(jsonData).to.have.property(\"currency_balance\").that.is.a('number');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/checkprofile?username=player1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"checkprofile"
									],
									"query": [
										{
											"key": "username",
											"value": "player1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "profile_not_found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message for user not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"User not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/checkprofile?username=nonexistent_user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"checkprofile"
									],
									"query": [
										{
											"key": "username",
											"value": "nonexistent_user"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message for missing username\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"User not found or missing parameters\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/checkprofile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"checkprofile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "retrieve_gachacollection",
					"item": [
						{
							"name": "retrieve_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"There are gachas in the collection of the user\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array'); // Controlla che la risposta sia un array",
											"    pm.expect(jsonData.length).to.be.greaterThan(0); // Controlla che ci siano oggetti nella collezione",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/retrieve_gachacollection?username=user1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"retrieve_gachacollection"
									],
									"query": [
										{
											"key": "username",
											"value": "user1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "no_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message for user not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"User not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/retrieve_gachacollection?username=nonexistent_user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"retrieve_gachacollection"
									],
									"query": [
										{
											"key": "username",
											"value": "nonexistent_user"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "no_collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The user has no gachas in his collection\", function () {",
											"    pm.expect(pm.response.json().message).to.include(\"User has no gachas\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/retrieve_gachacollection?username=user2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"retrieve_gachacollection"
									],
									"query": [
										{
											"key": "username",
											"value": "user2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "info_gachacollection",
					"item": [
						{
							"name": "info_gachacollection_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result include one gacha item\", function () {",
											"    pm.expect(pm.response.json().length).to.equal(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/info_gachacollection?username=user1&gacha_name=Trial%20gacha%20dogeGlasses.jpg",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"info_gachacollection"
									],
									"query": [
										{
											"key": "username",
											"value": "user1"
										},
										{
											"key": "gacha_name",
											"value": "Trial%20gacha%20dogeGlasses.jpg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NotExistingGacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error not existing gacha\", function () {",
											"    pm.expect(pm.response.json().error).to.include(\"No gachas found with the specified names\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/info_gachacollection?username=user1&gacha_name=aaaaa",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"info_gachacollection"
									],
									"query": [
										{
											"key": "username",
											"value": "user1"
										},
										{
											"key": "gacha_name",
											"value": "aaaaa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message for user not found\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"error\", \"User not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5003/info_gachacollection?username=aaaa&gacha_name=Trial%20gacha%20dogeGlasses.jpg",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"info_gachacollection"
									],
									"query": [
										{
											"key": "username",
											"value": "aaaa"
										},
										{
											"key": "gacha_name",
											"value": "Trial%20gacha%20dogeGlasses.jpg"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create_profile",
					"item": [
						{
							"name": "create_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test to check for the presence of the 'message' property in the response",
											"pm.test(\"Response contains the 'message' property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/create_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"create_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_NoUserParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test to check for the presence of the 'message' property in the response",
											"pm.test(\"Missing username parameter\", function () {",
											"    pm.expect(pm.response.json().error).to.include(\"Missing 'username' parameter\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/create_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"create_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_ProfileAlreadyExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test to check for the presence of the 'message' property in the response",
											"pm.test(\"Missing username parameter\", function () {",
											"    pm.expect(pm.response.json().error).to.include(\"Profile already exists\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/create_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"create_profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_profile",
					"item": [
						{
							"name": "delete_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Profile deleted successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile for username 'playerx' deleted successfully\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"player1\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/delete_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"delete_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_not_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for user not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"Error\", \"User not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"nonexistent_user\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/delete_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"delete_profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing username\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"Error\", \"User not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/delete_profile",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"delete_profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "insertGacha",
					"item": [
						{
							"name": "insert_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Gacha added successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Gacha 'Epic Gacha' added to collection\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"player2\",\n    \"gacha_name\": \"Epic Gacha\",\n    \"collected_date\": \"2024-11-22T12:00:00\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/insertGacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"insertGacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "date_not_valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for invalid date format\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\").that.includes(\"Invalid 'collected_date' format\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"player2\",\n    \"gacha_name\": \"Legendary Gacha\",\n    \"collected_date\": \"invalid-date\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/insertGacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"insertGacha"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "deleteGacha",
					"item": [
						{
							"name": "delete_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Gacha deleted successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Gacha 'dog' deleted from collection\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"player2\",\n    \"gacha_name\": \"dog\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/deleteGacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"deleteGacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "all_true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"All Gacha items deleted successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Gacha items with name 'dog' have been deleted for all users\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"dog\",\n    \"all\": true\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/deleteGacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"deleteGacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_not_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for non-existent Gacha\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Gacha not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"player1\",\n    \"gacha_name\": \"Nonexistent Gacha\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5003/deleteGacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5003",
									"path": [
										"deleteGacha"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "gacha_system",
			"item": [
				{
					"name": "add_gacha",
					"item": [
						{
							"name": "add_gacha_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the response message",
											"pm.test(\"Response message is 'Gacha added successfully'\", function () {",
											"    pm.expect(pm.response.json().message).to.equal('Gacha added successfully');",
											"});",
											"",
											"// Test to verify the gacha details include the required properties",
											"pm.test(\"Gacha details include name, image path, rarity, and description\", function () {",
											"    var gachaDetails = pm.response.json().gacha;",
											"    pm.expect(gachaDetails).to.have.property('name');",
											"    pm.expect(gachaDetails).to.have.property('image_path');",
											"    pm.expect(gachaDetails).to.have.property('rarity');",
											"    pm.expect(gachaDetails).to.have.property('description');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gacha_name",
											"value": "Trial gacha",
											"type": "text"
										},
										{
											"key": "rarity",
											"value": "common",
											"type": "text"
										},
										{
											"key": "description",
											"value": "This is a trial gacha",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efa8252-c07c-4de0-9114-3368d46f4848"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5004/add_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"add_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_gacha_AlreadyExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 400 when gacha is already present\", function () {",
											"  pm.response.to.have.status(400);",
											"  pm.expect(pm.response.json().error).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gacha_name",
											"value": "Trial2 gacha",
											"type": "text"
										},
										{
											"key": "rarity",
											"value": "common",
											"type": "text"
										},
										{
											"key": "description",
											"value": "This is a trial gacha",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efa8252-c07c-4de0-9114-3368d46f4848"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5004/add_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"add_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_gacha_MissingParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 400 with message 'Missing required fields (image, gacha_name, or rarity)' is returned when parameters gacha_name, rarity, or image are missing\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().error).to.include('Missing required fields (image, gacha_name, or rarity)');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gacha_name",
											"value": "Trial2 gacha",
											"type": "text"
										},
										{
											"key": "rarity",
											"value": "common",
											"type": "text"
										},
										{
											"key": "description",
											"value": "This is a trial gacha",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5004/add_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"add_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_gacha_VoidImage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 400 with message 'No selected file' is returned when image has not been selected\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().error).to.include('No selected file');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gacha_name",
											"value": "Trial2 gacha",
											"type": "text"
										},
										{
											"key": "rarity",
											"value": "common",
											"type": "text"
										},
										{
											"key": "description",
											"value": "This is a trial gacha",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "http://localhost:5004/add_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"add_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_gacha_InvalidImageType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 400 for file type not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().error).to.include('File type not allowed');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gacha_name",
											"value": "Trial2 gacha",
											"type": "text"
										},
										{
											"key": "rarity",
											"value": "common",
											"type": "text"
										},
										{
											"key": "description",
											"value": "This is a trial gacha",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1efa82bd-d1e5-4f30-abda-93bf7ad8bc5f"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5004/add_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"add_gacha"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_gacha",
					"item": [
						{
							"name": "delete_gacha_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for response status code and specific message in the response",
											"pm.test(\"Gacha successfully deleted\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().message).to.not.be.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"Trial gacha\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/delete_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"delete_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_gacha_MissingGachaName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 400 for missing gacha_name in request\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().error).to.include(\"Missing 'gacha_name' in query string.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/delete_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"delete_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_gacha_GachaNameNotExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 404 for gacha_name not existing\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().error).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"aaaaa\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/delete_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"delete_gacha"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_gacha",
					"item": [
						{
							"name": "update_gacha_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the response code",
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test to verify the response message",
											"pm.test(\"Response message is 'Gacha updated successfully'\", function () {",
											"    pm.expect(pm.response.json().message).to.equal('Gacha updated successfully');",
											"});",
											"",
											"// Test to verify the gacha details include the required properties",
											"pm.test(\"Gacha details include name, rarity, and description\", function () {",
											"    var gachaDetails = pm.response.json().gacha;",
											"    pm.expect(gachaDetails).to.have.property('name');",
											"    pm.expect(gachaDetails).to.have.property('rarity');",
											"    pm.expect(gachaDetails).to.have.property('description');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"Trial3 gacha\",\n    \"rarity\": \"legendary\",\n    \"description\": \"This gacha has become legendary\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/update_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"update_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_gacha_MissingGachaName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 400 for missing gacha_name in request\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().error).to.include(\"Missing required field: 'name'\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rarity\": \"rare\",\n    \"description\": \"This gacha has become rare\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/update_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"update_gacha"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_gacha_GachaNameNotExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error code 404 for gacha_name not existing\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().error).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"aaaa\",\n    \"rarity\": \"rare\",\n    \"description\": \"This gacha has become rare\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/update_gacha",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"update_gacha"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_gacha_collection",
					"item": [
						{
							"name": "getOneGacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Modified test to verify that the length of the gacha details list is equal to 1",
											"pm.test(\"Gacha details include one gacha item\", function () {",
											"    pm.expect(pm.response.json().length).to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"Trial gacha\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/get_gacha_collection",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"get_gacha_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListOfGachas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the response code",
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// verify that the gacha details include a list with 2 items",
											"pm.test(\"Gacha details include a list of 2 gachas\", function () {",
											"       pm.expect(pm.response.json().length).to.equal(2);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"Trial gacha,Trial2 gacha\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/get_gacha_collection",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"get_gacha_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllGachas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the response code",
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// verify that the gacha details include a list with 2 items",
											"pm.test(\"Gacha details include a list of gachas\", function () {",
											"       pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/get_gacha_collection",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"get_gacha_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "GachaNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the response code",
											"pm.test(\"Response code is 404 for gacha not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gacha_name\": \"aaaaa\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5004/get_gacha_collection",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"get_gacha_collection"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_gacha_roll",
					"item": [
						{
							"name": "get_gacha_roll_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Gacha details include id, name, description, rarity, and image\", function () {",
											"    var gachaDetails = pm.response.json();",
											"    pm.expect(gachaDetails).to.have.property('gacha_id');",
											"    pm.expect(gachaDetails).to.have.property('gacha_name');",
											"    pm.expect(gachaDetails).to.have.property('description');",
											"    pm.expect(gachaDetails).to.have.property('rarity');",
											"    pm.expect(gachaDetails).to.have.property('img');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5004/get_gacha_roll?level=premium",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"get_gacha_roll"
									],
									"query": [
										{
											"key": "level",
											"value": "premium"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gacha_roll_InvalidPacketLevel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400 for packet level not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().error).to.include(\"Invalid level. Valid levels are 'standard', 'medium', and 'premium'.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5004/get_gacha_roll?level=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5004",
									"path": [
										"get_gacha_roll"
									],
									"query": [
										{
											"key": "level",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "gacha_roll",
			"item": [
				{
					"name": "gacharoll_ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Gacha details include name, description, rarity, image, and collected date\", function () {",
									"    var gachaDetails = pm.response.json();",
									"    pm.expect(gachaDetails).to.have.property('gacha_name');",
									"    pm.expect(gachaDetails).to.have.property('description');",
									"    pm.expect(gachaDetails).to.have.property('rarity');",
									"    pm.expect(gachaDetails).to.have.property('img');",
									"    pm.expect(gachaDetails).to.have.property('collected_date');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"level\": \"standard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5007/gacharoll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5007",
							"path": [
								"gacharoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "gacharoll_MissingParam",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code 400 for parameter missing\", function () {",
									"  pm.response.to.have.status(400);",
									"  pm.expect(pm.response.json().error).to.include(\"Missing 'username' or 'level' parameter\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"level\": \"standard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5007/gacharoll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5007",
							"path": [
								"gacharoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "gacharoll_InvalidPacketLevel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code 400 for invalid packet level\", function () {",
									"  pm.response.to.have.status(400);",
									"  pm.expect(pm.response.json().error).to.include(\"Invalid level parameter\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"level\": \"aaa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5007/gacharoll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5007",
							"path": [
								"gacharoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "gacharoll_PaymentFailed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code 500 for payment failed\", function () {",
									"  pm.response.to.have.status(500);",
									"  pm.expect(pm.response.json().error).to.include(\"Payment failed\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"aaaa\",\n    \"level\": \"standard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5007/gacharoll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5007",
							"path": [
								"gacharoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "gacharoll_FailedToFetchGacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This test requires that there are no gachas in the system or at least no gachas for some rarity level",
									"pm.test(\"Response status code 500 for failing fetching gacha\", function () {",
									"  pm.response.to.have.status(500);",
									"  pm.expect(pm.response.json().error).to.include(\"Failed to fetch gacha from gachasystem\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"level\": \"standard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5007/gacharoll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5007",
							"path": [
								"gacharoll"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auction_market",
			"item": [
				{
					"name": "see",
					"item": [
						{
							"name": "all_auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify that the API returns the auctions",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is not an empty array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/see",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"see"
									]
								}
							},
							"response": []
						},
						{
							"name": "not_auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/see",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"see"
									]
								}
							},
							"response": []
						},
						{
							"name": "status_closed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"All auctions have status closed\", function () {",
											"    const jsonData = pm.response.json();",
											"    jsonData.forEach(auction => {",
											"        pm.expect(auction.status).to.eql(\"closed\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/see?status=closed",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"see"
									],
									"query": [
										{
											"key": "status",
											"value": "closed"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "status_active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"All auctions have status active\", function () {",
											"    const jsonData = pm.response.json();",
											"    jsonData.forEach(auction => {",
											"        pm.expect(auction.status).to.eql(\"active\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/see?status=active",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"see"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "found_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/see?auction_id=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"see"
									],
									"query": [
										{
											"key": "auction_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "not_found_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message is Auction not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Auction not found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/see?auction_id=999999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"see"
									],
									"query": [
										{
											"key": "auction_id",
											"value": "999999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create",
					"item": [
						{
							"name": "create_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Auction created successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Auction created successfully\");",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData.id).to.be.a('number');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"seller_username\": \"player1\",\n    \"gacha_name\": \"doge\",\n    \"basePrice\": 10.0,\n    \"endDate\": \"2024-12-31T23:59:59\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing parameters\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Missing required parameters\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"seller_username\": \"player2\",\n    \"gacha_name\": \"doge\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "price_not_valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for invalid base price\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Base price must be a positive number\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"seller_username\": \"player1\",\n    \"gacha_name\": \"GachaX\",\n    \"basePrice\": -50.0,\n    \"endDate\": \"2024-12-31T23:59:59\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "old_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for invalid end date\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"End date must be in the future\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"seller_username\": \"player1\",\n    \"gacha_name\": \"GachaX\",\n    \"basePrice\": 100.0,\n    \"endDate\": \"2023-01-01T23:59:59\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "twin_auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for existing active auction\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"An active auction already exists for this gatcha\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"seller_username\": \"player1\",\n    \"gacha_name\": \"doge\",\n    \"basePrice\": 10.0,\n    \"endDate\": \"2024-12-31T23:59:59\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bid",
					"item": [
						{
							"name": "bid_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Bid is successfully placed\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"New bid set\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/bid?username=player2&auction_id=1&newBid=50.0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"bid"
									],
									"query": [
										{
											"key": "username",
											"value": "player2"
										},
										{
											"key": "auction_id",
											"value": "1"
										},
										{
											"key": "newBid",
											"value": "50.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing parameters\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Missing required parameters\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/bid?username=player1&auction_id=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"bid"
									],
									"query": [
										{
											"key": "username",
											"value": "player1"
										},
										{
											"key": "auction_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "auction_not_found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for auction not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Auction not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/bid?username=jane_doe&auction_id=9999&newBid=150.0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"bid"
									],
									"query": [
										{
											"key": "username",
											"value": "jane_doe"
										},
										{
											"key": "auction_id",
											"value": "9999"
										},
										{
											"key": "newBid",
											"value": "150.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "low_bid_currentprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for invalid bid amount\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Bid must be higher than the current bid\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/bid?username=player&auction_id=1&newBid=10.0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"bid"
									],
									"query": [
										{
											"key": "username",
											"value": "player"
										},
										{
											"key": "auction_id",
											"value": "1"
										},
										{
											"key": "newBid",
											"value": "10.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "low_bid_baseprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for bid below base price\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Bid must be higher than the base_price\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/bid?username=jane_doe&auction_id=1&newBid=10.0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"bid"
									],
									"query": [
										{
											"key": "username",
											"value": "jane_doe"
										},
										{
											"key": "auction_id",
											"value": "1"
										},
										{
											"key": "newBid",
											"value": "10.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "nobid_for_actual_winner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for duplicate highest bidder\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"You are already the highest bidder\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:5008/bid?username=player2&auction_id=1&newBid=60",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"bid"
									],
									"query": [
										{
											"key": "username",
											"value": "player2"
										},
										{
											"key": "auction_id",
											"value": "1"
										},
										{
											"key": "newBid",
											"value": "60"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "gacha_receive",
					"item": [
						{
							"name": "receive_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Gacha successfully received\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Gacha correctly received\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auction_id\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/gacha_receive",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"gacha_receive"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing auction_id\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Invalid input: auction_id is required\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/gacha_receive",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"gacha_receive"
									]
								}
							},
							"response": []
						},
						{
							"name": "auction_not_found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for auction not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Auction not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auction_id\": 9999\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/gacha_receive",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"gacha_receive"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auction_lost",
					"item": [
						{
							"name": "lost_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Refund process completed\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Refund process completed\");",
											"    pm.expect(jsonData).to.have.property(\"successful_refunds\").that.is.an('array');",
											"    pm.expect(jsonData).to.have.property(\"failed_refunds\").that.is.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auction_id\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/auction_lost",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"auction_lost"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing auction_id\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Missing auction_id\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/auction_lost",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"auction_lost"
									]
								}
							},
							"response": []
						},
						{
							"name": "no_partecipants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for no bids\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"No bids found for this auction\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auction_id\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/auction_lost",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"auction_lost"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "auction_terminated",
					"item": [
						{
							"name": "terminated_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Money transferred successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Money correctly transferred to seller\");",
											"    pm.expect(jsonData).to.have.property(\"transaction_details\");",
											"    pm.expect(jsonData.transaction_details).to.have.property(\"payer_us\", \"auction_system\");",
											"    pm.expect(jsonData.transaction_details).to.have.property(\"receiver_us\");",
											"    pm.expect(jsonData.transaction_details).to.have.property(\"amount\").that.is.a('number').and.is.above(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auction_id\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/auction_terminated",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"auction_terminated"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing auction_id\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Missing auction_id\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/auction_terminated",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"auction_terminated"
									]
								}
							},
							"response": []
						},
						{
							"name": "current_bid_equal_0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for no valid bids\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Auction has no valid bids to transfer, no money sento from system to seller :()\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auction_id\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5008/auction_terminated",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5008",
									"path": [
										"auction_terminated"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "buycurrency",
					"item": [
						{
							"name": "buycur_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify buycurrency\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\",\r\n    \"amount\" : \"100\",\r\n    \"payment_method\" : \"card\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/buycurrency",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"buycurrency"
									]
								}
							},
							"response": []
						},
						{
							"name": "buycur_not_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify buycurrency\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"\",\r\n    \"amount\" : \"100\",\r\n    \"payment_method\" : \"card\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/buycurrency",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"buycurrency"
									]
								}
							},
							"response": []
						},
						{
							"name": "buycur_not_amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify buycurrency\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\",\r\n    \"amount\" : \"\",\r\n    \"payment_method\" : \"card\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/buycurrency",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"buycurrency"
									]
								}
							},
							"response": []
						},
						{
							"name": "buycur_not_method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify buycurrency\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"user1\",\r\n    \"amount\" : \"100\",\r\n    \"payment_method\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/buycurrency",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"buycurrency"
									]
								}
							},
							"response": []
						},
						{
							"name": "buycur_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify buycurrency\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"player\",\r\n    \"amount\": \"100\",\r\n    \"payment_method\" : \"card\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/buycurrency",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"buycurrency"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pay",
					"item": [
						{
							"name": "payOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "user2",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "20",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "pay_no_payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "user2",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "20",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "pay_no_receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to verify the login using username and password\r",
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "20",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "pay_no_amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "user2",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "pay_bad_payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "player",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "user2",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "20",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "pay_bad_receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "player",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "20",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "pay_not_sufficient_amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify payment using payer_us, receiver_us and amount\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(422));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "payer_us",
											"value": "user1",
											"type": "text"
										},
										{
											"key": "receiver_us",
											"value": "user2",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "1000000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5006/pay",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"pay"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "viewTrans",
					"item": [
						{
							"name": "view_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify viewTrans with username\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5006/viewTrans?username=user1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"viewTrans"
									],
									"query": [
										{
											"key": "username",
											"value": "user1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "view_no_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify viewTrans with username\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property(\"Error\")\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5006/viewTrans?username=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"viewTrans"
									],
									"query": [
										{
											"key": "username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "view_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify viewTrans with username\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5006/viewTrans?username=player",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"viewTrans"
									],
									"query": [
										{
											"key": "username",
											"value": "player"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "getBalance",
					"item": [
						{
							"name": "getBalance_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Trying to get the balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('username');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5006/getBalance?username=user1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"getBalance"
									],
									"query": [
										{
											"key": "username",
											"value": "user1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getBalance_not_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Trying to get the balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5006/getBalance?username=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"getBalance"
									],
									"query": [
										{
											"key": "username",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getBalance_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Trying to get the balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5006/getBalance?username=player",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"getBalance"
									],
									"query": [
										{
											"key": "username",
											"value": "player"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "newBalance",
					"item": [
						{
							"name": "newBalance_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify new balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"username\" : \"user44\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/newBalance",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"newBalance"
									]
								}
							},
							"response": []
						},
						{
							"name": "newBalance_not_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify new balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"username\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/newBalance",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"newBalance"
									]
								}
							},
							"response": []
						},
						{
							"name": "newBalance_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify new balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(422));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"username\" : \"user2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/newBalance",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"newBalance"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "deleteBalance",
					"item": [
						{
							"name": "deleteBalance_ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify delete balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('msg');\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"user1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/deleteBalance",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"deleteBalance"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteBalance_not_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify delete balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(400));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/deleteBalance",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"deleteBalance"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteBalance_bad_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify delete balance\", \r",
											"function () {\r",
											"    var responseData = pm.response.json();\r",
											"\r",
											"    // Add assertions to validate the response body\r",
											"    pm.expect(responseData).to.have.property('Error');\r",
											"    pm.expect(pm.response.to.have.status(404));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"player\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5006/deleteBalance",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5006",
									"path": [
										"deleteBalance"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}