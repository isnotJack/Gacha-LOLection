openapi: 3.0.0
info:
  title: Auction Market Api
  version: 1.0.0
  description: An Api to manage the auction market, enancing the user/admin to see, create, modify and bid to auctions

servers:
  - url: http://localhost:5008/auction_service
paths:
  /see:
    get:
      summary: See the active auctions, the old auctions or just one auction
      parameters:
        - name: auction_id
          in: query
          required: false
          description: id of the auction that the user (admin) want to see ( shows all if not present)
          schema:
            type: integer

        - name: status
          in: query
          required: false
          description: Parameter to select old auctions or active auctions. (active by default)
          schema:
            type: string
            enum: [active, old]
      responses:
        '200':
          description: List of active auctions
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctions:
                    type: array
                    items:
                      type: object
                      properties:
                        auct_id:
                          type: integer
                          description: Auction ID
                        gacha_id:
                          type: integer
                          description: Gacha ID
                        Winner:
                          type: integer
                          description: Current Winner ID
                        currentBid:
                          type: number
                          format: float
                          description: Current bid of the auction
                        endDate:
                          type: string
                          format: date-time
                          description: Auction end date and time
                                          
        '400':
              description: Invalid Input
        '404':
              description: Service down or invalid operation
  /create:
    post:
      summary: create a new auction
      parameters: 
        - name: seller_id
          in: query
          required: true
          description: id of the seller (the user that create a new auction)
          schema:
            type: integer

        - name: gacha_id
          in: query
          required: true
          description: id of gacha which will be auctioned off 
          schema:
            type: integer

        - name: endDate
          in: query
          required: true
          description: end date of the auction
          schema:
            type: string
            format: date-time
        
        - name: basePrice
          in: query
          required: true
          description: base price for the auction
          schema:
            type: number
            format: float
              
      responses:
        '200':
          description: Auction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the newly created auction
                  message:
                    type: string
                    example: Auction created successfully                            
        '400':
              description: Invalid Input
        '404':
              description: Service down or invalid operation
  /modify:
    patch:
      summary: modify an existent auction (admin)
      parameters: 
        - name: auction_id
          in: query
          required: true
          description: id of the auction
          schema:
            type: integer

        - name: seller_id
          in: query
          required: false
          description: id of the seller (the user that created that auction) (if not present, remains the same)
          schema:
            type: integer

        - name: gacha_id
          in: query
          required: false
          description: id of gacha which will be auctioned off (if not present, remains the same)
          schema:
            type: integer

        - name: endDate
          in: query
          required: false
          description: end date of the auction (if not present, remains the same)
          schema:
            type: string
            format: date-time
          
        - name: basePrice
          in: query
          required: false
          description: base price for the auction (if not present, remains the same)
          schema:
            type: number
            format: float
          
      responses:
        '200':
          description: Auction updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the updated auction
                  message:
                    type: string
                    example: Auction updated successfully                            
        '400':
              description: Invalid Input
        '404':
              description: Service down or invalid operation
  /bid:
    patch:
      summary: bid for an auction
      parameters: 
        - name: bidder_id
          in: query
          required: true
          description: id of the bidder (the user that bid for the auction) 
          schema:
            type: integer

        - name: auction_id
          in: query
          required: true
          description: id of the auction 
          schema:
            type: integer
        
        - name: newBid
          in: query
          required: true
          description: the bid to participate to the auction
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Bid updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: New bid sets                           
        '400':
              description: Invalid Input
        '404':
              description: Service down or invalid operation          
        
  /gacha_receive:
    post:
      summary: Receive a gacha after winning it (talks with profile APIs)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auction_id:
                  type: integer
                  description: ID of the auction associated with the gacha
                winner_username:
                  type: string
                  description: Username of the user who won the gacha
                gacha_name:
                  type: string
                  description: Name of the gacha
      responses:
        '200':
          description: Gacha correctly received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Gacha correctly received                           
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input
        '404':
          description: Service down or invalid operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Auction not found or service is down


  /auction_lost:
    post:
      summary: Process refunds for all participants who lost an auction (invokes the payment service to transfer funds back to users).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auction_id:
                  type: integer
                  description: ID of the auction to process refunds for.
      responses:
        '200':
          description: Refund process completed with details of successful and failed transactions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refund process completed
                  successful_refunds:
                    type: array
                    description: List of refunds that were processed successfully.
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          description: Username of the user who received the refund.
                        amount:
                          type: number
                          format: float
                          description: Amount refunded to the user.
                  failed_refunds:
                    type: array
                    description: List of refunds that failed during processing.
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          description: Username of the user whose refund failed.
                        error:
                          type: string
                          description: Reason for the failure.
        '400':
          description: Invalid Input (e.g., missing auction ID).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing auction_id
        '404':
          description: Auction not found or no bids associated with the auction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Auction not found

              
/auction_terminated:
  post:
    summary: Process the transfer of funds to the seller after an auction is terminated with a winner.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              auction_id:
                type: integer
                description: ID of the auction that has terminated.
    responses:
      '200':
        description: Funds successfully transferred to the seller.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Money correctly received
                transaction_details:
                  type: object
                  properties:
                    payer_us:
                      type: string
                      description: Username of the system as the payer.
                    receiver_us:
                      type: string
                      description: Username of the seller who received the payment.
                    amount:
                      type: number
                      format: float
                      description: Amount transferred to the seller.
      '400':
        description: Invalid Input (e.g., missing or incorrect auction ID).
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: Missing auction_id
      '404':
        description: Auction not found or auction has no winner.
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: Auction not found or no winner assigned



